"""Select 100000 malware binaries split equally between the different classes"""

import sqlite3
import pandas as pd
from constants import CATEGORIES
import os
from tqdm import tqdm


COLUMNS = ("sha256", "is_malware", "rl_fs_t", "rl_ls_const_positives") + CATEGORIES


def get_meta(hashes=set(), progress={}, n_per_category=10000):
    con = sqlite3.connect("meta.db")
    cur = con.cursor()

    rows = []
    for category in CATEGORIES:
        res = cur.execute(f"SELECT * FROM meta WHERE {category} >= 1;")
        added = progress[category] if category in progress else 0
        with tqdm(total=n_per_category) as pbar:
            while added < n_per_category:
                row = res.fetchone()
                if hash := row[0] not in hashes:
                    rows.append(row)
                    hashes.add(hash)
                    added += 1
                    pbar.update()

    return pd.DataFrame(rows, columns=COLUMNS)


def save_urls(path="100k.pkl"):
    df = pd.read_pickle(path)
    with open("get.txt", "w") as f:
        for hash in df["sha256"]:
            print(
                f"http://sorel-20m.s3.amazonaws.com/09-DEC-2020/binaries/{hash}",
                file=f,
            )


# Some of the files don't actually exist on their S3 bucket
def correct(inpath, download_path="statout/test", outpath="new.pkl"):
    df = pd.read_pickle(inpath)
    downloaded = set(os.listdir(inpath))
    which = inpath.stem

    bad = set()
    corrected = []
    bad_fname = f"bad-{which}.pkl"
    if os.path.isfile(bad_fname):
        bad = set(pd.read_pickle(bad_fname))
    for _, row in df.iterrows():
        hash = row["sha256"]
        if hash not in downloaded:
            bad.add(hash)
        else:
            corrected.append(row)

    bad = pd.Series(list(bad))
    bad.to_pickle(bad_fname)

    corrected = pd.DataFrame(corrected)
    corrected.to_pickle(f"corrected-{which}.pkl")

    progress = {
        category: corrected.query(f"{category} >= 1").shape[0]
        for category in CATEGORIES
    }

    new_rows = get_meta(downloaded, progress)
    new_df = pd.DataFrame(new_rows, columns=COLUMNS)
    new_df.to_pickle(outpath)


if __name__ == "__main__":
    correct(inpath='test.pkl')
