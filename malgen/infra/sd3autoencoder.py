from ldm.models.autoencoder import AutoencoderKL
import json
import lightning as L
from torch import nn
import torch.nn.functional as F
from malgen.infra.fix_channels import fix_channels
from malgen.infra.imagedata import ImageDataModule
import argparse

# https://github.com/huggingface/diffusers/blob/main/scripts/convert_original_stable_diffusion_to_diffusers.py
# https://github.com/huggingface/diffusers/blob/main/src/diffusers/pipelines/stable_diffusion/convert_from_ckpt.py
# https://huggingface.co/docs/diffusers/en/api/models/autoencoderkl#loading-from-the-original-format
# https://github.com/huggingface/diffusers/blob/main/scripts/convert_diffusers_to_original_stable_diffusion.py


def get_model(channels):
    model = None
    fix_channels(model)
    fix_channels(model)
    return model


def train(channels, train_dir, val_dir):
    model = get_model(channels)
    trainer = L.Trainer(
        devices=-1,
        precision="bf16-mixed",
        gradient_clip_val=1,
        max_epochs=10,
    )
    datamod = ImageDataModule(train_dir, val_dir, label=False)
    trainer.fit(model, datamodule=datamod)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-tr", "--train_dir", type=str)
    parser.add_argument("-va", "--val_dir", type=str)
    parser.add_argument("-c", "--channels", type=int)
    args = parser.parse_args()
    train(args.channels, args.train_dir, args.val_dir)
