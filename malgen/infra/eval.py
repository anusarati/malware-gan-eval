import torch_fidelity


class TorchFidelityMetrics:
    """Functional object to evaluate torch_fidelity metrics (IS, FID, KID, Precision, Recall)"""

    def __init__(self, dataset, z_size, z_type, num_classes) -> None:
        self.dataset = dataset
        self.z_size = z_size
        self.z_type = z_type
        self.num_classes = num_classes

    def __call__(self, generator):
        wrapped_generator = torch_fidelity.GenerativeModelModuleWrapper(
            generator, self.z_size, self.z_type, self.num_classes
        )
        return torch_fidelity.calculate_metrics(
            input1=wrapped_generator,
            input2=self.dataset,
            cuda=True,
            isc=True,
            fid=True,
            kid=True,
            prc=True,
            verbose=False,
        )


def get_evals(generator, eval_fns):
    evals = {}
    for eval_fn in eval_fns:
        evals.update(eval_fn(generator))
    return evals