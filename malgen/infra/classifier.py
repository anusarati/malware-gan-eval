from typing import Any
from transformers import ConvNextV2ForImageClassification, ConvNextV2Config
import torch
from torch import nn, optim
import torch.nn.functional as F
import lightning as L
from imagedata import ImageDataModule
from torchvision.transforms import v2
import argparse
from malgen.bin_vis.embedding.color import RGBProjector


class Classifier(L.LightningModule):
    def __init__(self, config: ConvNextV2Config, *args: Any, **kwargs: Any):
        super().__init__(*args, **kwargs)
        self.classifier = ConvNextV2ForImageClassification(config)

    def forward(self, x) -> Any:
        return self.classifier(x).logits

    def training_step(self, batch, *args: Any, **kwargs: Any):
        images, labels = batch
        logits = self(images)
        # multi-label, classes can overlap
        loss = F.binary_cross_entropy_with_logits(logits, labels)
        self.log("loss", loss, prog_bar=True)
        return loss

    def validation_step(self, batch, *args: Any, **kwargs: Any):
        return self.training_step(batch)

    def configure_optimizers(self):
        optimizer = optim.AdamW(self.parameters(), lr=0.001)
        lr_scheduler_config = {
            "scheduler": optim.lr_scheduler.CosineAnnealingWarmRestarts(
                optimizer=optimizer, T_0=20
            ),
            "interval": "epoch",
            "frequency": 1,
        }
        return {"optimizer": optimizer, "lr_scheduler": lr_scheduler_config}


def train_classifier(classifier, datamod: ImageDataModule):
    torch.set_float32_matmul_precision("medium")
    trainer = L.Trainer(
        devices=-1, precision="bf16-mixed", gradient_clip_val=1, max_epochs=10
    )
    trainer.fit(classifier, datamod)
    classifier.save_checkpoint(f"{datamod.name}.ckpt")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-mode", type=str, required=True, choices=["L", "RGB", "embed"])
    parser.add_argument("-train_dir", type=str, required=True)
    parser.add_argument("-val_dir", type=str, required=True)
    parser.add_argument("-classes", type=int, default=11)
    args = parser.parse_args()
    print(args)
    mode_channels = {"L": 1, "RGB": 3, "embed": 64}
    classifier = Classifier(
        ConvNextV2Config(num_channels=mode_channels[args.mode], num_labels=args.classes)
    )
    projector: RGBProjector = torch.load("rgbproj.pkl")
    norm_stats = {
        "L": [[0.5], [0.25]],
        "RGB": [[0.5] * 3, [0.25] * 3],
        "embed": [projector.mean, projector.std],
    }
    norm = v2.Normalize(*norm_stats[args.mode])
    datamod = ImageDataModule(
        train_dir=args.train_dir, val_dir=args.val_dir, transform=norm
    )
    print(torch.cuda.memory_summary())
    train_classifier(classifier, datamod)
