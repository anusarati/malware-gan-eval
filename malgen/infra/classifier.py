from typing import Any
from transformers import ConvNextV2ForImageClassification, ConvNextV2Config
import torch
from torch import optim
import torch.nn.functional as F
import lightning as L
from malgen.infra.imagedata import ImageDataModule
from torchvision.transforms import v2
import argparse
from malgen.bin_vis.embedding.color import RGBProjector
from torchmetrics import Accuracy, Precision, Recall


class Classifier(L.LightningModule):
    def __init__(
        self,
        config: ConvNextV2Config = ConvNextV2Config(num_channels=1, num_labels=11),
        *args: Any,
        **kwargs: Any,
    ):
        super().__init__(*args, **kwargs)
        self.classifier = ConvNextV2ForImageClassification(config)
        self.config = config
        self.save_hyperparameters()
        metrics_kwags = {"task": "multiclass", "num_classes": config.num_labels}
        self.accuracy = Accuracy(**metrics_kwags)
        self.precision = Precision(**metrics_kwags)
        self.recall = Recall(**metrics_kwags)

    def forward(self, x) -> Any:
        return self.classifier(x).logits

    def training_step(self, batch, *args: Any, **kwargs: Any):
        images, labels = batch
        self.log("size", images.shape[-1], prog_bar=True)
        logits = self(images)
        loss = F.cross_entropy(logits, labels)
        self.log("loss", loss, prog_bar=True)
        return loss

    def validation_step(self, batch, *args):
        images, labels = batch
        logits = self(images)
        loss = F.cross_entropy(logits, labels)
        predictions = logits.softmax(dim=-1)

        self.log("loss", loss, prog_bar=True)
        metrics = {
            "accuracy": self.accuracy,
            "precision": self.precision,
            "recall": self.recall,
        }
        for name, metric in metrics.items():
            metric(predictions, labels)
            self.log(name, metric)
        return loss

    def configure_optimizers(self):
        optimizer = optim.AdamW(self.parameters(), lr=0.001)
        lr_scheduler_config = {
            "scheduler": optim.lr_scheduler.CosineAnnealingWarmRestarts(
                optimizer=optimizer, T_0=50
            ),
            "interval": "epoch",
            "frequency": 1,
        }
        return {"optimizer": optimizer, "lr_scheduler": lr_scheduler_config}

    def save_backbone(self, fname):
        torch.save(self.classifier.convnextv2, fname)


def train_classifier(classifier, datamod: ImageDataModule, epochs=20, checkpoint=None):
    if torch.cuda.is_available():
        print(torch.cuda.get_device_name())
    torch.set_float32_matmul_precision("medium")
    trainer = L.Trainer(precision="bf16-mixed", gradient_clip_val=1, max_epochs=epochs)
    trainer.fit(classifier, datamod, ckpt_path=checkpoint)
    classifier.save_backbone(f"{datamod.name}.pt")


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-mode", type=str, required=True, choices=["L", "RGB", "embed"])
    parser.add_argument("-t", "--train_dir", type=str, required=True)
    parser.add_argument("-v", "--val_dir", type=str)
    parser.add_argument("-classes", type=int, default=11)
    parser.add_argument("-l", "--label_type", type=str, default="parquet")
    parser.add_argument("-e", "--epochs", type=int, default=20)
    parser.add_argument("-c", "--checkpoint", type=str, default=None)
    args = parser.parse_args()
    print(args)
    mode_channels = {"L": 1, "RGB": 3, "embed": 64}
    classifier = Classifier(
        ConvNextV2Config(
            num_channels=mode_channels[args.mode], num_labels=args.classes
        ),
    )
    projector: RGBProjector = torch.load("rgbproj.pkl")
    norm_stats = {
        "L": [[0.5], [0.25]],
        "RGB": [[0.5] * 3, [0.25] * 3],
        "embed": [projector.mean, projector.std],
    }
    norm = v2.Normalize(*norm_stats[args.mode])
    datamod = ImageDataModule(
        train_dir=args.train_dir,
        val_dir=args.val_dir,
        transform=norm,
        bucket=True,
        label_type=args.label_type,
    )
    train_classifier(
        classifier, datamod, epochs=args.epochs, checkpoint=args.checkpoint
    )
