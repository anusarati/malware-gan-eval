from typing import Any
from transformers import ConvNextV2ForImageClassification, ConvNextV2Config
import torch
from torch import nn, optim
import torch.nn.functional as F
import lightning as L
from imagedata import ImageDataModule


class Classifier(L.LightningModule):
    def __init__(self, config: ConvNextV2Config, *args: Any, **kwargs: Any):
        super().__init__(*args, **kwargs)
        self.classifier = ConvNextV2ForImageClassification(config)

    def forward(self, x) -> Any:
        return self.classifier(x)

    def training_step(self, batch, *args: Any, **kwargs: Any):
        images, labels = batch
        logits = self(images)
        # multi-label, classes can overlap
        loss = F.binary_cross_entropy_with_logits(logits, labels)
        self.log("loss", loss, prog_bar=True)
        return loss

    def configure_optimizers(self):
        optimizer = optim.AdamW(self.parameters(), lr=0.001)
        lr_scheduler_config = {
            "scheduler": optim.lr_scheduler.CosineAnnealingWarmRestarts(
                optimizer=optimizer, T_0=20
            ),
            "interval": "epoch",
            "frequency": 1,
        }
        return {"optimizer": optimizer, "lr_scheduler": lr_scheduler_config}


def train_classifier(classifier, datamod: ImageDataModule):
    trainer = L.Trainer(
        devices=-1, precision="bf16-mixed", gradient_clip_val=1, max_epochs=10
    )
    trainer.fit(classifier, datamod)
    classifier.save_checkpoint(f"{datamod.name}.ckpt")


if __name__ == "__main__":
    classifier = Classifier(ConvNextV2Config())
    classifier = torch.compile(classifier, mode="reduce-overhead")

    train_classifier(classifier, datamod)
