"""Generate captions for StableTuner"""

import pyarrow as pa
import pyarrow.parquet as pq
import pandas as pd
from malgen.infra.constants import CATEGORIES
import numpy as np
from functools import partial
from pathlib import Path
import argparse
from math import ceil
from tqdm import tqdm


def caption(input_pkl, extension, get_dim, rank, world_size):
    df = pd.read_pkl(input_pkl)
    df = df[["sha256", *CATEGORIES]]
    if rank:
        n_per_node = ceil(df.shape[0] / world_size)
        df = df.iloc[n_per_node * rank : n_per_node * (rank + 1)]
    data = {"filename": [], "caption": [], "width": [], "height": []}
    for _, row in tqdm(df.iterrows(), total=df.shape[0]):
        filename = row["sha256"] + extension
        labels = [category for category in CATEGORIES if row[category]]
        caption = ", ".join(labels)
        width, height = get_dim(filename)

        data["filename"].append(filename)
        data["caption"].append(caption)
        data["width"].append(width)
        data["height"].append(height)

    data = pd.DataFrame.from_dict(data)
    if world_size > 1:
        data.to_pickle(f"data-{rank}".pkl)
    else:
        table = pa.Table.from_pandas(data)
        pq.write_table(table, "data.parquet")


def np_dim(base_dir, filename):
    filepath = Path(base_dir) / filename
    data = np.load(filepath)
    return data.shape[-1], data.shape[-2]


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-rank", type=int)
    parser.add_argument("-world_size", type=int)

    parser.add_argument("-i", type=str)
    parser.add_argument("-ext", type=str)

    parser.add_argument("-w", type=str)
    parser.add_argument("-h", type=str)
    parser.add_argument("-dir", type=str)

    args = parser.parse_args()

    if args.w and args.h:
        get_dim = lambda f: args.w, args.h
    else:
        get_dim = partial(np_dim, args.dir)

    caption(
        input_pkl=args.i,
        extension=args.ext,
        get_dim=get_dim,
        rank=args.rank,
        world_size=args.world_size,
    )
