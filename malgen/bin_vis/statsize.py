"""Get statistics about square binary image side lengths"""

from pathlib import Path
import argparse
from math import ceil
from tqdm.contrib.concurrent import thread_map
from threading import Lock
import os
from math import sqrt
import torch
import pickle


def gray_size(path):
    binsize = os.path.getsize(path)
    return int(sqrt(binsize))


def rgb_size(path):
    binsize = os.path.getsize(path)
    return int(sqrt(binsize / 3))


def embed_size(path):
    return torch.load(path).shape[-1]


def stat_sizes(mode, rank, world_size, idir, out):
    out = Path(out)
    idir = Path(idir)
    size_fn_map = {"L": gray_size, "RGB": rgb_size, "embed": embed_size}
    size_fn = size_fn_map[mode]

    paths = list(idir.iterdir())
    n_per_node = ceil(len(paths) / world_size)

    assigned = paths[n_per_node * rank : n_per_node * (rank + 1)]
    size_freqs = {}
    freqs_lock = Lock()

    def update_size(path):
        if path.name != "labels.pkl":
            size = size_fn(path)
            with freqs_lock:
                size_freqs.setdefault(size, 0)
                size_freqs[size] += 1

    thread_map(update_size, assigned)
    with open(out / f"_sizefreqs{rank}.pkl", "wb") as f:
        pickle.dump(size_freqs, f)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-rank", type=int)
    parser.add_argument("-world_size", type=int)
    parser.add_argument("-mode", type=str)
    parser.add_argument("-dir", type=str)
    parser.add_argument("-out", type=str)
    args = parser.parse_args()
    print(args)
    stat_sizes(
        mode=args.mode,
        rank=args.rank,
        world_size=args.world_size,
        idir=args.dir,
        out=args.out if args.out else ".",
    )
