"""Reduce mapped files"""

import pickle
import json
from pathlib import Path
import argparse


def reduce(idir, rfun, init, name):
    aggregate = init
    prefix = f"_{name}"
    for path in Path(idir).iterdir():
        if prefix in path.name:
            with open(path, "rb") as f:
                local = pickle.load(f)
                aggregate = rfun(aggregate, local)

    return aggregate


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "-m", "--mode", type=str, default="union", choices=["style", "union", "usum"]
    )
    parser.add_argument("-dir", type=str, default=".")
    parser.add_argument("-n", "--name", type=str, required=True)
    args = parser.parse_args()

    if args.mode == "style":
        labels = reduce(args.dir, lambda x, y: x + y, [], "labels")
        # StyleGAN
        with open("dataset.json", "w") as f:
            json.dump({"labels": labels}, f)
    else:
        if args.mode == "union":
            labels = reduce(args.dir, lambda x, y: x | y, {}, args.name)
            with open(f"{args.name}.pkl", "wb") as f:
                pickle.dump(labels, f)
        elif args.mode == "usum":

            def add_freqs(agg: dict, local: dict):
                for key, val in local.items():
                    if key not in agg:
                        agg[key] = val
                    else:
                        agg[key] += val
                return agg

            size_freqs = reduce(args.dir, add_freqs, {}, args.name)
            with open(f"{args.name}.pkl", "wb") as f:
                pickle.dump(size_freqs, f)
        else:
            print(f"Mode {args.mode} not recognized")
