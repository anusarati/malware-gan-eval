"""Convert binaries to valid UTF-8"""

from math import ceil
from pathlib import Path
from tqdm.contrib.concurrent import thread_map
import argparse
from functools import partial

UTF8_TABLE = (b'\xc3\x9e', b'\xc3\xb6', b'\xc3\xaa', b'\xc4\x98', b'\xc4\x90', b'\xc3\xac', b'\xc3\x9a', b'\xc3\xb1', b'\xc3\xb0', b'\xc3\xa1', b'\xc3\x99', b'\xc4\x80', b'\xc3\xb2', b'\xc3\xa0', b'\xc3\x91', b'\xc3\xb8', b'\xc3\xbe', b'\xc3\xa2', b'\xc3\xb4', b'\xc3\xa9', b'\xc3\x92', b'\xc3\x9d', b'\xc3\xb5', b'\xc3\x9c', b'\xc3\xa6', b'\xc4\xa9', b'\xc3\x96', b'\xc4\xa6', b'\xc4\x9a', b'\xc4\x9d', b'\xc4\x8e', b'\xc3\x8a', b'\xc4\xb0', b'\xc4\x8d', b'\xc4\x88', b'\xc3\xae', b'\xc2\xbe', b'\xc4\xa4', b'\xc3\x98', b'\xc4\x94', b'\xc3\xbc', b'\xc4\x81', b'\xc4\xa2', b'\xc4\xa1', b'\xc4\x92', b'\xc3\xa5', b'\xc4\xad', b'\xc3\x94', b'\xc4\x9c', b'\xc3\x95', b'\xc4\xb1', b'\xc4\x96', b'\xc4\x99', b'\xc3\xba', b'\xc4\x91', b'\xc3\xa8', b'\xc4\xa8', b'\xc3\xaf', b'\xc3\x9b', b'H', b'\xc3\xbd', b'\xc4\xa5', b'\xc3\xb7', b'\xc4\xaa', b'\xc3\x89', b'\xc3\xad', b'\xc4\x82', b'\xc4\x97', b'\xc3\xbf', b';', b'K', b'\xc4\xb5', b'>', b'<', b'\xc4\xa0', b'\xc3\xb9', b'\xc4\x9e', b'\xc3\x9f', b'\xc3\xab', b'?', b'\xc3\x8f', b'\xc3\x81', b'\xc3\x82', b'\xc4\xb2', b'8', b'G', b'\xc4\xb4', b':', b'_', b'\xc4\x95', b'\xc3\x85', b'\xc3\xb3', b'N', b'\xc3\xa7', b'J', b'\xc4\x8c', b'\xc4\xbc', b'\xc4\x9f', b'\xc4\xb6', b'\xc4\xa7', b'\xc4\xb8', b'`', b'@', b'^', b'7', b'P', b'L', b'4', b'\xc4\xba', b'\xc3\x97', b'\xc3\x80', b'\xc3\xa3', b'\xc4\xb9', b'F', b'\xc2\xa3', b'C', b'\xc4\x8b', b'\xc4\xbd', b'\xc4\x93', b'\xc4\xbe', b'|', b'\xc4\x9b', b'\xc3\x8d', b'\xc3\x84', b'\xc2\xa1', b'M', b'\xc3\xa4', b'\xc3\xbb', b'\xc4\x85', b'\xc4\xa3', b'\xc4\x89', b'\xc4\x84', b'}', b']', b'/', b'\xc3\x8b', b'D', b'\xc2\xbf', b'=', b',', b'2', b'\xc4\xb7', b'[', b'\xc5\x80', b'\xc2\xbd', b'~', b'\\', b'6', b'\xc4\xac', b'I', b'9', b'\xc4\x87', b'\xc4\xae', b'.', b'B', b'\xc4\xb3', b'\xc2\xb4', b'\xc4\xaf', b'\xc4\x8a', b'{', b'\xc3\x87', b'\xc2\xa2', b'*', b'\xc2\xae', b'\xc4\xbb', b'O', b'X', b'\xc2\xbc', b'l', b'\xc2\xb9', b'5', b'p', b'\xc2\xba', b'\xc3\x93', b'W', b'\xc2\xaa', b'V', b'\xc2\xa5', b'k', b'Z', b'+', b'(', b'h', b'3', b'\xc3\x83', b'y', b'S', b'\xc2\xbb', b'o', b'\xc5\x81', b"'", b'\xc2\xb0', b'Y', b'\xc4\x86', b'z', b'U', b'R', b'r', b'&', b'x', b'\xc3\x88', b's', b'\xc4\xbf', b'-', b'j', b'\xc2\xad', b'm', b'u', b'\xc2\xb3', b'\xc2\xa9', b'c', b'w', b'\xc2\xa6', b'd', b'0', b'\xc4\x83', b'g', b't', b'\xc2\xb1', b'n', b'\xc2\xaf', b'\xc2\xa7', b'\xc2\xb6', b'b', b'\xc3\x90', b'1', b'\xc2\xab', b'T', b'\xc2\xac', b'\xc2\xb2', b'\xc2\xb5', b'\xc2\xa4', b'v', b'i', b'a', b'\xc3\x86', b'\xc2\xb8', b'e', b'E', b'Q', b'\xc3\x8c', b'$', b'#', b'q', b')', b'\xc2\xa8', b'\xc4\xab', b'%', b'A', b'f', b'\xc2\xb7', b'\xc4\x8f', b'"', b'\xc3\x8e', b'\xc5\x82', b'!')


def convert_utf8(filepath, outdir):
    filepath = Path(filepath)
    outpath = Path(outdir) / filepath.name
    if not outpath.is_file():
        with open(filepath, "rb", buffering=0) as input:
            data = input.readall()
            data = b"".join(map(lambda b: UTF8_TABLE[b], data))
        with open(outpath, "wb", buffering=0) as out:
            out.write(data)


from math import ceil

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-rank", type=int)
    parser.add_argument("-world_size", type=int)
    parser.add_argument("-i", "--dir", type=str, required=True)
    parser.add_argument("-o", "--out", type=str, required=True)
    args = parser.parse_args()
    print(args)

    paths = list(Path(args.dir).iterdir())
    n_per_node = ceil(len(paths) / args.world_size)

    assigned_paths = paths[n_per_node * args.rank : n_per_node * (args.rank + 1)]

    thread_map(
        partial(convert_utf8, outdir=args.out),
        assigned_paths,
    )
