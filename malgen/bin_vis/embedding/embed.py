"""Convert text files to embedding images"""

import sys
import numpy as np
from tqdm.contrib.concurrent import thread_map
import youtokentome as yttm
from pathlib import Path
from math import sqrt
import fasttext
import torch
from itertools import islice
import os

model_path = "tokenizer.model"
bpe = yttm.BPE(model=model_path)
model = fasttext.load_model("malbed.bin")


def embed(filepath):
    if isinstance(filepath, str):
        filepath = filepath.rstrip()
    with open(filepath, "r") as input:
        text = input.read()
        tokens = bpe.encode(
            [text],
            output_type=yttm.OutputType.SUBWORD,
        )[0]
        # use a perfect square size for the image
        side = int(sqrt(len(tokens)))
        n = side**2
        tokens = tokens[:n]

        embeddings = np.empty((64, side, side))
        for i in range(side):
            for j in range(side):
                embeddings[:, i, j] = model[tokens[side * i + j]]

        embeddings = torch.tensor(embeddings)
        return embeddings


def save_embed(path):
    OUTDIR = Path("statout/embeds")
    filepath = Path(filepath)
    outpath = OUTDIR / (filepath.name + ".pt")
    if not os.path.isfile(outpath):
        embeddings = embed(path)
        torch.save(embeddings, outpath)


from math import ceil

if __name__ == "__main__":
    job_id = int(sys.argv[1])
    with open("rem.txt") as path_file:
        paths = path_file.readlines()
        N_NODES = 200
        N_PER_NODE = ceil(len(paths) / N_NODES)
        print(N_PER_NODE)
        start = job_id * N_PER_NODE
        assigned_paths = list(islice(paths, start, start + N_PER_NODE))
        print(assigned_paths)

        thread_map(
            save_embed,
            assigned_paths,
            total=min(N_PER_NODE, len(assigned_paths) - start),
            max_workers=5,
        )
