"""Train with progressive growing for StyleSAN-XL"""

import argparse
import os
from pathlib import Path
import subprocess
import sys

if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-if", "--idirf", type=str, required=True)
    parser.add_argument("-s", "--stop_size", type=int, required=True)
    parser.add_argument("-g", "--gpus", type=int, required=True)
    args = parser.parse_args()

    img_sizes = [16]
    batch_sizes = [2048]

    while img_sizes[-1] != args.stop_size:
        img_sizes.append(img_sizes[-1] * 2)
        batch_sizes.append(batch_sizes[-1] // 2)

    outdir = Path("./training-runs/progressive")

    base_command = "python train.py --cfg=stylegan3-t --mirror=False --snap 10 --cbase 16384 --cmax 256 --syn_layers 7 --cond True "
    base_args = "--outdir={outdir} --gpus={gpus} --batch {batch} --kimg {kimg} --data {data_path} "

    superres_args = "--superres --up_factor 2 --head_layers 7 --path_stem {path_stem} "

    for i in range(len(img_sizes)):
        img_size = img_sizes[i]
        batch_size = batch_sizes[i]
        kimg = 10000 if img_size < 128 else 5000
        data_path = args.idirf.format(img_size)
        command = base_command + base_args.format(
            outdir=str(outdir / str(img_size)),
            gpus=args.gpus,
            batch=batch_size,
            kimg=kimg,
            data_path=data_path,
        )
        if i > 0:
            prev_dir = outdir / str(img_sizes[i - 1])
            # find the most recent network-snapshot.pkl file from the previous training directory
            latest_dir = max(
                filter(lambda path: path.is_dir(), Path(prev_dir).iterdir()),
                key=os.path.getmtime,
            )
            print("Continuing training from", str(latest_dir))

            command += superres_args.format(
                path_stem=str(latest_dir / "network-snapshot.pkl")
            )
        print(command)
        subprocess.run(command.split(), stdout=sys.stdout, stderr=sys.stderr, check=True)
