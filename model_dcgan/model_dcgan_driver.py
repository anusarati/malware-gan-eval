import torch

import torchvision
import torchvision.utils as vutils

import matplotlib.pyplot as plt

import lightning as L
from lightning.pytorch.callbacks.early_stopping import EarlyStopping
from lightning.pytorch.loggers.tensorboard import TensorBoardLogger
import os
import sys
from model_dcgan.mdc import ModelDCGAN, ModelDCGAN_DataModule

#sys.path.insert(0, '../malware-gen-eval/malgen/infra/')
#from imagedata import ImageDataModule

img_size = 128
batch_size = 64
num_channels = 1
num_classes = 10
#data_dir = "../interpolated/128/L/"
data_dir = "."
max_epochs = 10
dvc = "cuda"

device = ""
if torch.cuda.is_available():
    device = torch.device("cuda")
    print("Cuda available")
else:
    device = torch.device("cpu")
    print("Is not available")

logger = TensorBoardLogger("tb_logs", name="model_dcgan_128L")

# early_stop_callback = EarlyStopping(monitor="g_loss", min_delta=0.00, verbose=False, patience=5, mode="min")
trainer = L.Trainer(accelerator="gpu", devices="auto", max_epochs=max_epochs, logger=logger)
model = ModelDCGAN(num_channels, img_size, num_classes, dvc=dvc, embed_size=num_classes, batch_size=batch_size)
#data_module = ImageDataModule(train_dir=data_dir, batch_size=batch_size, label_type="dir", bucket=False)
data_module = ModelDCGAN_DataModule(data_dir, img_size, batch_size=batch_size)
trainer.fit(model, data_module)

torch.save(model.state_dict(), 'model_dcgan_128L.pt')
