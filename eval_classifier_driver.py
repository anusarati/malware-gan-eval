import torch
from torch import optim, nn
from torch.utils.data import DataLoader

import torchvision
import torchvision.utils as vutils
from torchvision.datasets import CIFAR10
import torchvision.transforms as transforms
import torchvision.transforms.functional as F

import numpy as np
import math
import matplotlib.pyplot as plt

import lightning as L
from lightning.pytorch.callbacks.early_stopping import EarlyStopping

import os

import eval_classifier

img_size = 32
latent_dim = 100
batch_size = 8
num_channels = 3
num_classes = 11
img_dir = "."
max_epochs = 10

device = ""
if torch.cuda.is_available():
    device = torch.device("cuda")
else:
    device = torch.device("cpu")

trainer = L.Trainer(max_epochs=max_epochs)
model = eval_classifier.EvalClassifier(num_channels, img_size)
data_module = eval_classifier.EvalClassifier_DataModule(img_dir, img_size, batch_size=batch_size)
trainer.fit(model, data_module)

torch.save(model.state_dict(), 'eval_classifier.pt')

