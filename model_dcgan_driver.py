import torch
from torch import optim, nn
from torch.utils.data import DataLoader

import torchvision
import torchvision.utils as vutils
from torchvision.datasets import CIFAR10
import torchvision.transforms as transforms
import torchvision.transforms.functional as F

import numpy as np
import math
import matplotlib.pyplot as plt

import lightning as L
from lightning.pytorch.callbacks.early_stopping import EarlyStopping

import os

import model_dcgan

img_size = 64
latent_dim = 100
batch_size = 128
num_channels = 1
num_classes = 10
img_dir = "."
max_epochs = 30

device = ""
if torch.cuda.is_available():
    device = torch.device("cuda")
else:
    device = torch.device("cpu")

early_stop_callback = EarlyStopping(monitor="g_loss", min_delta=0.00, verbose=False, patience=5, mode="min")
trainer = L.Trainer(max_epochs=max_epochs)
model = model_dcgan.ModelDCGAN(num_channels, img_size, num_classes, latent_dim=latent_dim, batch_size=batch_size)
data_module = model_dcgan.ModelDCGAN_DataModule(img_dir, img_size, batch_size=batch_size)
trainer.fit(model, data_module)

torch.save(model.state_dict(), 'model_dcgan.pt')

latent_space_samples = torch.randn(batch_size, 100, 1, 1).to(device=device)
class_labels = torch.randint(10, (batch_size, 1, 1, 1)).to(device=device)
generated_samples = model(latent_space_samples, class_labels)
generated_samples = generated_samples.detach().cpu()
fig = plt.figure(figsize=(10,10))
plt.axis("off")
plt.title("Generated Images")
grid = vutils.make_grid(generated_samples[:40], padding=2, normalize=True)
plt.imshow(np.transpose(grid, (1, 2, 0)))
plt.savefig("model_dcgan_test.png")

