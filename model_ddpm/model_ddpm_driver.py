import torch

import torchvision
import torchvision.utils as vutils

import matplotlib.pyplot as plt

import lightning as L
from lightning.pytorch.callbacks.early_stopping import EarlyStopping

import os

from model_ddpm import ModelDDPM, ModelDDPM_DataModule

img_size = 32
latent_dim = 100
batch_size = 128
num_channels = 1
num_classes = 10
num_timesteps = 100
data_dir = "."
max_epochs = 30

device = ""
if torch.cuda.is_available():
    device = torch.device("cuda")
else:
    device = torch.device("cpu")

# early_stop_callback = EarlyStopping(monitor="g_loss", min_delta=0.00, verbose=False, patience=5, mode="min")
trainer = L.Trainer(max_epochs=max_epochs)
model = ModelDDPM(num_channels, img_size, num_classes, num_timesteps, batch_size=batch_size)
data_module = ModelDDPM_DataModule(data_dir, img_size, batch_size=batch_size)
trainer.fit(model, data_module)

torch.save(model.state_dict(), 'model_ddpm.pt')
