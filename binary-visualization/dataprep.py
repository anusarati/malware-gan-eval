"""Prepares most of an image dataset folder for StyleGAN using distributed computing"""

from vis import visualize
import pandas as pd
from pathlib import Path
from infra.constants import CATEGORIES
import argparse
import pickle
from math import ceil
from tqdm.contrib.concurrent import thread_map


def organize_images(size, mode, rank, world_size, base_out):
    df = pd.read_pickle("corrected.pkl")
    df = df[list(("sha256",) + CATEGORIES)]
    DIR = Path("statin/decompressed")
    outdir = Path(base_out) / str(size) / mode
    for category in CATEGORIES:
        (outdir / category).mkdir(parents=True, exist_ok=True)
    labels = []

    n_rows = df.shape[0]
    n_per_node = ceil(n_rows / world_size)

    df = df.iloc[n_per_node * rank : n_per_node * (rank + 1)]

    def organize_image(entry):
        nonlocal labels
        filename = entry.sha256
        filepath = DIR / filename
        img = visualize(filepath=filepath)
        img = img.resize((size, size))
        for i, category in enumerate(CATEGORIES):
            if entry.__getattribute__(category) >= 1:
                relpath = Path(category) / (filename + ".png")
                outpath = outdir / relpath
                img.save(outpath)
                labels.append([str(relpath), i])

    thread_map(
        organize_image,
        df.itertuples(),
        total=min(n_per_node, n_rows - n_per_node * rank),
    )

    with open(outdir / f"labels{rank}.pkl", "wb") as pkl_file:
        pickle.dump(labels, pkl_file)


if __name__ == "__main__":
    parser = argparse.ArgumentParser()
    parser.add_argument("-rank", type=int)
    parser.add_argument("-size", type=int)
    parser.add_argument("-world_size", type=int)
    parser.add_argument("-mode", type=str)
    parser.add_argument("-out", type=str)
    args = parser.parse_args()
    print(args)
    organize_images(
        size=args.size,
        mode=args.mode,
        rank=args.rank,
        world_size=args.world_size,
        base_out=args.out if args.out else ".",
    )
