from PIL import Image
from math import sqrt
from pathlib import Path
from embedding import embed


def visualize(filepath, mode="L"):
    """
    Returns a square image of the file at filepath
    """
    with open(filepath, "rb", 0) as bytestream:
        bin = bytestream.readall()
        size = len(bin)

        side = sqrt(size)
        if mode == "RGB":
            side //= 3
        side = int(side)

        if mode in ("L", "RGB"):
            return Image.frombytes(mode, (side, side), bin)


def save_size_vars(img, dir, filename):
    (dir / "128").mkdir(parents=True, exist_ok=True)
    (dir / "512").mkdir(parents=True, exist_ok=True)
    img.save(dir / filename)
    img.resize((128, 128), Image.NEAREST).save(dir / "128" / filename)
    img.resize((512, 512), Image.NEAREST).save(dir / "512" / filename)


def save_vars(path, dir=""):
    path = Path(path)
    dir = Path(dir)
    filename = path.name + ".png"

    img = visualize(path)
    save_size_vars(img, dir / "gray", filename)
    img = visualize(path, mode="RGB")
    save_size_vars(img, dir / "rgb", filename)


import pandas as pd
from constants import CATEGORIES


def visualize_examples():
    df = pd.read_pickle("corrected.pkl")
    for category in CATEGORIES:
        within_category = df.query(f"{category} >= 1").sample(10)
        for hash in within_category["sha256"]:
            save_vars(f"bins/decompressed/{hash}", f"imgs/{category}")


import torch
from torchvision.transforms.v2.functional import to_pil_image
import pickle


@torch.inference_mode()
def visualize_embeds():
    reducer = pickle.load(open("reducer.pkl", "rb"))
    rgb_reducer = pickle.load(open("rgb_reducer.pkl", "rb"))
    df = pd.read_pickle("corrected.pkl")
    for category in CATEGORIES:
        within_category = df.query(f"{category} >= 1").sample(10)
        for hash in within_category["sha256"]:
            path = f"bins/decompressed/{hash}"
            emb = reducer(embed.embedder.embed_image(path))
            torch.save(emb, f"imgs/{category}/embed/tensors/{hash}.pt")
            rgb_emb = rgb_reducer(emb)
            img = to_pil_image(rgb_emb)
            save_size_vars(img, f"imgs/{category}/embed/rgb", f"{hash}.png")


if __name__ == "__main__":
    visualize_embeds()
