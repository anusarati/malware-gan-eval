import numpy as np
from itertools import islice
from pathlib import Path
import sys
from tqdm.contrib.concurrent import process_map


def get_byte_stats(data: bytes):
    freqs = np.zeros(256, dtype=np.uint32)
    for byte in data:
        freqs[byte] += 1
    return freqs


def get_file_byte_stats(filepath):
    with open(filepath, "rb", buffering=0) as input:
        freqs = np.zeros(256, dtype=np.uint32)
        data = input.readall()
        for byte in data:
            freqs[byte] += 1
        return freqs


from math import ceil

N_FILES = 105652
N_NODES = 200
N_PER_NODE = ceil(N_FILES / N_NODES)

if __name__ == "__main__":
    job_id = int(sys.argv[1])
    start = job_id * N_PER_NODE
    assigned_paths = islice(Path("statin/decompressed").iterdir(), start, start + N_PER_NODE)

    def save_byte_stats(filepath):
        freqs = get_file_byte_stats(filepath)
        np.save(Path("statout") / filepath.name, freqs)

    process_map(
        save_byte_stats,
        assigned_paths,
        total=min(N_PER_NODE, N_FILES - start),
    )
